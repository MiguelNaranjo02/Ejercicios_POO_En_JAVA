import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.util.Random;

import javax.management.timer.Timer;
import javax.swing.JPanel;

public class PanelJuego extends JPanel implements ActionListener {
	static final int ancho = 600;
	static final int alto = 600;
	static final int tamUnid = 25;
	static final int jugUnid = (ancho * alto) / tamUnid;
	static final int DELAY = 175;
	final int x[] = new int[jugUnid];
	final int y[] = new int[jugUnid];
	
	int partSerp = 6;
	int manCom;
	int manX;
	int manY;
	
	char direccion = 'R';
	boolean running = false;
	Timer timer;
	Random random;
	

	Manzana man = new Manzana();
	Serpiente serp = new Serpiente();

	PanelJuego() {
		random = new Random();
		this.setPreferredSize(new Dimension(ancho, alto));
		this.setBackground(Color.black);
		this.setFocusable(true);
		this.addKeyListener(new MyKeyAdapter());
		empezar();

	}

	public void empezar() {
		man.nuevaManzana(ancho, alto, tamUnid);
		running = true;
		timer = new Timer(DELAY.this);
		// timer.start();

	}

	public void paintComponent(Graphics g) {
		super.paintComponent(g);
		dibujar(g);

	}

	public void dibujar(Graphics g) {
		if (running) {
			for (int i = 0; i < alto / tamUnid; i++) {
				g.drawLine(i * tamUnid, 0, i * tamUnid, alto);
				g.drawLine(0, i * tamUnid, ancho, i * tamUnid);
			}
			g.setColor(Color.red);
			g.fillOval(man.getManX(), man.getManY(), tamUnid, tamUnid);

			for (int i = 0; i < partSerp; i++) {
				if (i == 0) {
					g.setColor(Color.green);
					g.fillRect(x[i], y[i], tamUnid, tamUnid);
				} else {
					g.setColor(new Color(45, 180, 0));
					// g.setColor(new
					// Color(random.nextInt(255),random.nextInt(255),random.nextInt(255)));
					g.fillRect(x[i], y[i], tamUnid, tamUnid);
				}
			}
		}
	}

	public void juegoTerminado(Graphics g) {

	}

	public void mover() {

		for (int i = partSerp; i > 0; i--) {
			x[i] = x[i - 1];
			y[i] = y[i - 1];
		}

		switch (direccion) {
		case 'U':
			y[0] = y[0] - tamUnid;
			break;
		case 'D':
			y[0] = y[0] + tamUnid;
			break;
		case 'L':
			x[0] = x[0] - tamUnid;
			break;
		case 'R':
			x[0] = x[0] + tamUnid;
			break;
		}

	}

	public void actionPerformed(ActionEvent e) {
		if (running) {
			mover();
			// serp.mover(x,y,tamUnid,partSerp,direccion);
			man.comprobarManzana(x, y, partSerp, manCom, ancho, alto, tamUnid);
			// serp.comprobarColision();
		}
		repaint();

	}

	public class MyKeyAdapter extends KeyAdapter {
		@Override
		public void keyPressed(KeyEvent e) {
			switch (e.getKeyCode()) {
			case KeyEvent.VK_LEFT:
				if (direccion != 'R') {
					direccion = 'L';
				}
				break;
			case KeyEvent.VK_RIGHT:
				if (direccion != 'L') {
					direccion = 'R';
				}
				break;
			case KeyEvent.VK_UP:
				if (direccion != 'D') {
					direccion = 'U';
				}
				break;
			case KeyEvent.VK_DOWN:
				if (direccion != 'U') {
					direccion = 'D';
				}
				break;
			}
		}
	}

}
