/*
	 * Programa: Plantilla que encripta un mensaje
	 * Autor: Miguel Angel Naranjo Joya.
	 * Fecha:  6 de nov de 2020.
*/
package encriptaCesar;

public class MetodoJulCesar {
	//Inicializacion de variables privadas
	private String abc = "abcdefghijklmnñopqrstuvwxyz";
	private char[] abcCarac = abc.toCharArray();
	private String palabraOrg = "";
	private String palabraEncrip = "";

	public String getAbc() {//Metodo getter del abecedario
		return abc;
	}

	public void setAbc(String abc) {//Metodo setter del abecedario
		this.abc = abc;
	}

	public char[] getAbcCarac() {//Metodo getter del arreglo de caracteres del abecedario
		return abcCarac;
	}

	public String getPalabraOrg() {//Metodo getter del String que contiene la palabra original en caracteres
		return palabraOrg;
	}

	public void setPalabraOrg(String palabraOrg) {//Metodo setter del String ue contiene la palabra original en caracteres
		this.palabraOrg = palabraOrg;
	}

	public String getPalabraEncrip() {//Metodo getter de la palabra encriptada en caracteres
		return palabraEncrip;
	}

	public void setPalabraEncrip(String palabraEncrip) {//Metodo setter de la palabra encriptada
		this.palabraEncrip = palabraEncrip;
	}

	public void setAbcCarac(char[] abcCarac) {//Metodo setter del arreglo de caracteres del abecedario
		this.abcCarac = abcCarac;
	}

	public String palabrachar(char[] msjCarac) {//Metodo que convierte un arreglo de caracteres en un string usando un for para recorrer el arreglo
		palabraOrg="";

		for (int posArrPal = 0; posArrPal < msjCarac.length; posArrPal++) {
			palabraOrg = palabraOrg + msjCarac[posArrPal] + " ";

		}
		return palabraOrg;
	}

	public void encriptacion(char[] msjCarac, int corrimiento) {//Metodo que encripta una palabra
		for (int posArrPal = 0; posArrPal < msjCarac.length; posArrPal++) {//For que recorre el arreglo de caracteres de la palabra
			if (msjCarac[posArrPal] != ' ' && msjCarac[posArrPal] != '.' && msjCarac[posArrPal] != ',') {//Sentencia if que revisa si la posicion en la palabra no tiene un espacio, una coma, o un punto
				int posArrAbc = 0;
				while (msjCarac[posArrPal] != abcCarac[posArrAbc]
						&& Character.toUpperCase(msjCarac[posArrPal]) != Character.toUpperCase(abcCarac[posArrAbc])) {//Bucle while que revisa si la letra en la palabra es la misma que en el abecedario
					posArrAbc = posArrAbc + 1;

				}
				if (posArrAbc + corrimiento >= abcCarac.length) {//Sentencia if que revisa si el corrimiento que queda por hacer es mayor que el tamaño del abecedario
					int auxCorrimiento = Math.abs(abcCarac.length - posArrAbc); //La cantidad de espacios que faltan por recorrer es igual a la longitud del abecedario menos la posicion actual del abecedario
					posArrAbc = Math.abs(corrimiento - auxCorrimiento);//La posicion en el abecedario seria igual al corrimiento menos el auxiliar del corrimiento
				} else {
					posArrAbc = posArrAbc + corrimiento;//La posicion del arreglo del abecedario es igual a la posicion del arreglo del abecedario mas el corrimiento restante 
				}

				if (Character.isUpperCase(msjCarac[posArrPal])) {//Si la letra en la palabra es mayuscula, la letra que se le copee del abecedario sera convertida a mayuscula
					msjCarac[posArrPal] = Character.toUpperCase(abcCarac[posArrAbc]);

				} else {
					msjCarac[posArrPal] = abcCarac[posArrAbc];//La letra en la palabra sera reemplazada por la letra en el abecedario que este en la posicion en cuestion
				}
			}

		}
	}
	public String retoEncript(char[] msjCarac, int corrimiento) {
		encriptacion(msjCarac, corrimiento);
		for (int posArrPal = 0; posArrPal < msjCarac.length; posArrPal++) {
			System.out.print(msjCarac[posArrPal] + " ");
		}
		
		return palabraEncrip;
	}

}
